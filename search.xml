<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>你好，天物小站2.0</title>
    <url>/2021/06/21/%E4%BD%A0%E5%A5%BD%EF%BC%8C%E5%A4%A9%E7%89%A9%E5%B0%8F%E7%AB%992-0/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h3><p>在几个月前搭建的天物小站1.0（Notion + nextjs-notion-starter-kit + vercal搭建），最近不知道为什么经常性的上不去，所以才想到使用hexo，虽然1.0因为是用notion的记东西十分方便，不过上不去就十分的蛋疼了，所有这就是天物小站2.0的来源</p>
<h3 id="关于2-0"><a href="#关于2-0" class="headerlink" title="关于2.0"></a>关于2.0</h3><ul>
<li><p><input checked="" disabled="" type="checkbox">  hexo(butterfly) + github + 域名</p>
</li>
<li><p>hexo(cactus) + github + 域名</p>
</li>
<li><p>图床gitee + PicGo</p>
</li>
<li><p>会整合小站1.0的文章再精校并添加新内容再发布到2.0</p>
</li>
<li><p>若有梯子的朋友们可以继续上1.0</p>
</li>
<li><p>1.0 与 2.0 可能会同步更新（也可能不会）</p>
</li>
</ul>
<h3 id="一些话"><a href="#一些话" class="headerlink" title="一些话"></a>一些话</h3><ul>
<li>希望自己不断进步吧</li>
<li>以后也在这里添加一些随笔与感想，不过平常上班估计更新频率不高</li>
<li>以上</li>
</ul>
]]></content>
      <tags>
        <tag>天物的碎碎念</tag>
      </tags>
  </entry>
  <entry>
    <title>测试基础（三）—— 自动化测试</title>
    <url>/2021/06/24/%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%20%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E4%BC%98%E5%8A%A3/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="自动化测试"><a href="#自动化测试" class="headerlink" title="自动化测试"></a>自动化测试</h3><ul>
<li><p>优势：</p>
<ul>
<li>替代大量手工机械重复性操作，测试可以在用例设计和新功能测试花更多的时间</li>
<li>大幅提升回归测试的效率，特别适合敏捷开发</li>
<li>非工作时间自动化运行</li>
<li>高效实现一些手工测试无法达到的或成本过高的测试，例如烤机</li>
<li>保证测试执行的一致性与可重复性，避免了人为疏漏 </li>
</ul>
</li>
<li><p>劣势：</p>
<ul>
<li>并不能完全替代手工测试</li>
<li>到意外事件没有处理能力，用例维护成本高，有例可有效使用至少5次才能收回成本</li>
<li>自动化测试仅能发现回归范围的缺陷</li>
<li>依赖于用例设计与实现质量</li>
<li>大量初期开发的测试用例都需要重构</li>
<li>需要业务与自动化紧密合作才能高效开展自动化测试</li>
</ul>
</li>
<li><p>使用场景：</p>
<ul>
<li>需求稳定、不会频繁变更的场景</li>
<li>研发与维护周期长（中期以上），需要频繁回归的场景</li>
<li>需要在多种平台上重复运行相同的场景</li>
<li>手工无法实现的场景</li>
<li>被测软件的开发较为规范而且能够保证系统可测试性的场景</li>
<li>测试人员已具备一定编程能力的场景</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>测试基础（二）—— 软测概念</title>
    <url>/2021/06/24/%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%20%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="软测概念"><a href="#软测概念" class="headerlink" title="软测概念"></a>软测概念</h3><ul>
<li>定义：<code>通过人工或自动化的方式运行软件，发现软件潜在缺陷并使其得到有效处理的过程</code></li>
<li>核心概念：一种用来促进鉴定软件的正确性、完整性、安全性和质量的过程</li>
<li>目的：<ul>
<li>确保软件<code>质量</code></li>
<li>保证软件<code>安全</code></li>
<li>降低软件<code>开发成本</code></li>
<li>降低企业<code>风险</code></li>
<li>提升<code>用户体验</code>感</li>
</ul>
</li>
<li>作用：发现更多软件潜在的问题，将问题所带来的危害影响降到最低</li>
<li>类型划分：<ul>
<li>阶段：单元、集成、系统、验收（测试）</li>
<li>了解软件结构：<code>黑</code>、白、灰（盒）</li>
<li>测试对象：<code>功能</code>、<code>UI</code>、业务、用户体验、安装/卸载、兼容性、<code>性能</code>、<code>安全</code>、<code>接口</code>等（测试）</li>
<li>是否运行代码：静态（代码检查）、<code>动态</code></li>
<li>是否手动：手动、自动化（测试）</li>
</ul>
</li>
</ul>
<h3 id="测试七大基本原则"><a href="#测试七大基本原则" class="headerlink" title="测试七大基本原则"></a>测试七大基本原则</h3><ul>
<li>不可穷尽性</li>
<li>避免开发自测</li>
<li>测试尽早介入</li>
<li>群集现象：在测试中发现缺陷越多的地方,存在的未被发现的缺陷也就越多<ul>
<li>（二八定律）:80%的错误在20%的代码里</li>
</ul>
</li>
<li>不存在缺陷谬论</li>
<li>杀虫剂悖论：对软件进行越多的测试，那么该软件对软件测试人员的测试就越具有免疫力</li>
<li>测试活动依赖于测试背景（场景）</li>
</ul>
]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
  <entry>
    <title>在hexo搭建时踏过的一些坑——CNAME与hexo d</title>
    <url>/2021/06/22/%E5%9C%A8hexo%E6%90%AD%E5%BB%BA%E6%97%B6%E8%B8%8F%E8%BF%87%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="CNAME"><a href="#CNAME" class="headerlink" title="CNAME"></a>CNAME</h3><p>在<code>hexo d</code>上传我们的hexo项目至Github或者Gitee后还需要设置page为自己需要的域名，例我的域名为<code>sut-blog.top</code>设置在我的源码Github.io项目的Pages：<img src="https://gitee.com/konghi1949/my_img/raw/master/img/image-20210622193051719.png" alt="image-20210622193051719"></p>
<p>此时会在项目下生成一个<code>CNAME</code>，内容为我的域名，项目成功使用我的域名登录，yes！！！但当我以为一切都会顺利，在本地写第一篇博客并<code>hexo g &amp; hexo d</code>，访问它时挂了，然后返回github一看，CNAME不见了，需要在Pages重新设置（我的天，如果每次更新都需要设置Pages的话，我还写个啥博客呀），于是我好好的去了解了hexo的一些原理，即：</p>
<ul>
<li><code>hexo g</code>为构建项目，若果没有的话项目无法运行</li>
<li><code>hexo d</code>为复制本地的项目并上传</li>
<li><code>hexo clean</code>为清除本地项目</li>
</ul>
<p>所以尝试了把CNAME放在本地的public后hexo d，这次终于不用设置github了但，public是在<code>hexo g</code>后生成的，考虑到会经常使用它，所以这个方法还是无效的</p>
<p>再又一段时间的了解下，发现public是从<code>themes\butterfly\source</code>下的资源生成的之后，CNAME的问题才迎刃而解，即</p>
<p>在hexo g之前若果需要设置Pages，请把CNAME文件预先放置于<code>themes\butterfly\source</code>下，在hexo g时public就会出现CNAME！</p>
<hr>
<h3 id="hexo-d"><a href="#hexo-d" class="headerlink" title="hexo d"></a>hexo d</h3><p>在本地部署好hexo与github之后，想要hexo d我们还需要一个包并在_config.yml设置项目的去向</p>
<ul>
<li><p>在项目下<code>npm install --save hexo-deployer-git</code></p>
</li>
<li><p>修改（添加）_config.yml：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span> </span><br><span class="line">  <span class="attr">repo:</span> <span class="string">git@github.com:..github.io.git</span> <span class="comment">#该为自己仓库的上传链接，没有必要请勿设置https类型的</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span> <span class="comment">#如果项目不在main的话可以修改</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>测试基础（一）—— 软件生命周期</title>
    <url>/2021/06/22/%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%80%EF%BC%89%E2%80%94%E2%80%94%E5%88%9D%E5%85%A5%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="软件的生命周期"><a href="#软件的生命周期" class="headerlink" title="软件的生命周期"></a>软件的生命周期</h3><ul>
<li>瀑布型生命周期（<code>最早</code>软件生命周期）</li>
</ul>
<p><img src="https://gitee.com/konghi1949/my_img/raw/master/img/1189851-20190401153904371-1721650287.png"></p>
<ul>
<li>V模型</li>
</ul>
<p><img src="https://gitee.com/konghi1949/my_img/raw/master/img/1189851-20190401161519951-776380355.png"></p>
<p>V模型适用于一些传统信息系统应用的开发，只是在一一对应做用户需求分析时编写验收测试用例等等，<code>未执行</code>，测试还是放在编码的后面，所以它并不是敏捷开发</p>
<ul>
<li>W模型</li>
</ul>
<p><img src="https://gitee.com/konghi1949/my_img/raw/master/img/image-20210622212158003.png" alt="image-20210622212158003"></p>
<p>由图可以看出来开发与测试是同步进行的，有利于在早期发现问题，属于敏捷开发，也符合<code>测试应今早介入</code>的测试原则，这也是目前主流的软件开发与测试核心理念</p>
<ul>
<li>敏捷开发模型</li>
</ul>
<p><img src="https://gitee.com/konghi1949/my_img/raw/master/img/1189851-20190401195656383-1246309164.png"></p>
<p>现<code>主流</code>模型，一种以用户需求进化为核心（强调沟通、弱化文档）、迭代、循序渐进的开发方法。强调以人为本，专注于交付对客户有价值的软件。是一个用于开发和维持复杂产品的框架 </p>
<p>图片与一些资料来自网络，侵删</p>
]]></content>
      <tags>
        <tag>测试</tag>
      </tags>
  </entry>
</search>
